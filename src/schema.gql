# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Appointment {
  id: Int!
  date_time: String!
  type: String!
  status: String!
  box: Box!
  patient: Patient!
  personnel: Personnel!
}

type Box {
  id: Int!
  box: Int!
  branch: Branch!
  appointments: [Appointment!]!
  is_active: Boolean!
}

type Branch {
  id: Int!
  box_count: Int!
  address: String!
  boxes: [Box!]!
  personnel: [Personnel!]!
  is_active: Boolean!
}

type BranchResponse {
  success: Boolean!
  message: String!
}

type MedicalRecord {
  id: Int!
  diagnosis: String!
  prescription: String!
  date_time: String!
  patient: Patient!
  personnel: Personnel!
}

type Availability {
  id: Int!
  day: String!
  turn: String!
  personnel: Personnel!
}

type AvailabilityResponse {
  success: Boolean!
  message: String!
}

type Patient {
  id: Int!
  access_token: String
  recovery_code: Float
  rut: String!
  password: String!
  birthdate: String!
  first_name: String!
  middle_name: String
  surname: String!
  second_surname: String
  sex: String!
  address: String!
  region: String!
  commune: String!
  email: String!
  phone: String!
  appointments: [Appointment!]!
  medical_records: [MedicalRecord!]!
  is_active: Boolean!
}

type Personnel {
  id: Int!
  access_token: String
  recovery_code: Float
  rut: String!
  password: String!
  first_name: String!
  middle_name: String
  surname: String!
  second_surname: String
  email: String!
  role: String!
  speciality: String!
  branch: Branch!
  appointments: [Appointment!]!
  medical_records: [MedicalRecord!]!
  availability: [Availability!]!
  is_active: Boolean!
}

type UserResponse {
  success: Boolean!
  message: String!
}

type Query {
  uniqueRUT(rut: String!): UserResponse!
  getPatientByRut(rut: String!): Patient!
  getPatient(id: Int!): Patient!
  getAllPatients: [Patient!]!
  getPersonnelByRut(rut: String!): Personnel!
  getPersonnel(id: Int!): Personnel!
  getAllPersonnel: [Personnel!]!
  getBranch(id: Int!): Branch!
  getAllBranches: [Branch!]!
  getBox(id: Int!): Box!
  getBoxesByBranch(id_branch: Int!): [Box!]!
}

type Mutation {
  createPatient(input: CreatePatientInput!): UserResponse!
  createPersonnel(input: CreatePersonnelInput!): UserResponse!
  assignAvailability(input: AssignAvailabilityInput!): AvailabilityResponse!
  createBranch(input: CreateBranchInput!): BranchResponse!
  updateBranch(input: UpdateBranchInput!): Branch!
  createBox(input: CreateBoxInput!): BranchResponse!
  updateBox(input: UpdateBoxInput!): Box!
  loginPatient(input: LoginInput!): Patient!
  loginPersonnel(input: LoginInput!): Personnel!
  recoveryPatient(input: RecoveryUserInput!): UserResponse!
  recoveryPersonnel(input: RecoveryUserInput!): UserResponse!
  validateRecovery(input: ValidateRecoveryUserInput!): UserResponse!
  changePasswordPatient(input: ChangePasswordInput!): UserResponse!
  changePasswordPersonnel(input: ChangePasswordInput!): UserResponse!
}

input CreatePatientInput {
  rut: String!
  password: String!
  birthdate: String!
  first_name: String!
  middle_name: String
  surname: String!
  second_surname: String
  sex: String!
  address: String!
  region: String!
  commune: String!
  email: String!
  phone: String!
}

input CreatePersonnelInput {
  rut: String!
  password: String!
  first_name: String!
  middle_name: String
  surname: String!
  second_surname: String
  email: String!
  role: String!
  speciality: String!
  id_branch: Float
}

input AssignAvailabilityInput {
  id_personnel: Float!
  turns: String!
}

input CreateBranchInput {
  address: String!
}

input UpdateBranchInput {
  id: Float!
  address: String
  is_active: Boolean
}

input CreateBoxInput {
  id_branch: Float!
  box: Float!
}

input UpdateBoxInput {
  id: Float!
  box: Float
  is_active: Boolean
}

input LoginInput {
  rut: String!
  password: String!
}

input RecoveryUserInput {
  rut: String!
}

input ValidateRecoveryUserInput {
  recoveryPass: Int!
}

input ChangePasswordInput {
  rut: String!
  newPassword: String!
}